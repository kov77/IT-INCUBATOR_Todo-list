{"version":3,"sources":["serviceWorker.ts","api/todolists-api.tsx","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.tsx","TodoList.tsx","Header.tsx","state/todolists-reducer.tsx","AppWithRedux.tsx","state/store.tsx","index.tsx","Todolist.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","inputTaskValue","setInputTaskValue","error","setError","onChangeInputHandler","e","newValue","currentTarget","value","charAt","toUpperCase","slice","onKeyPressInputHandler","key","trim","addItem","TextField","id","label","size","onChange","onKeyPress","className","variant","Button","style","maxWidth","maxHeight","minWidth","minHeight","backgroundColor","onClick","EditableSpan","EditMode","SetEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","instance","axios","create","withCredentials","headers","baseURL","todolistApi","get","todolistId","post","taskId","delete","Task","el","status","Completed","checked","New","changeTaskStatus","type","onCnangeListItemHandler","IconButton","removeTask","aria-label","Delete","initialState","TodoList","onClickFilterHandlerAll","useCallback","filterTasks","onClickFilterHandlerActive","onClickFilterHandlerComplited","dispatch","useDispatch","useEffect","then","response","tasks","payload","SetTasksAC","data","items","addTask","onChangeTitleItem","changeTodolistTitle","tasksForTodoList","filter","classes","todolistClass","todolistHeader","todolistXBtn","removeTodoList","allItems","selectAllItems","tasksArray","allItemsInput","allSelectItem","todolistItemsWrapper","map","onChangeListItemHandler","btnFilterClasses","Header","AppBar","position","Toolbar","Typography","noWrap","component","sx","flexGrow","display","xs","sm","color","selectAllItemsAC","isChecked","tasksObj","AppWithRedux","todolists","useSelector","state","todoListId","addTodolist","v1","addTodolistAC","filterTasksAC","changeTodolistTitleAC","addTaskAC","addTaskTC","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","todolistID","Container","fixed","Grid","container","padding","spacing","item","Paper","selectHandler","rootReducer","combineReducers","action","stateCopy","forEach","todolist","task","newTask","description","priority","Low","startDate","deadline","order","addedDate","copyState","todoList","find","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.7a919613.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst instance = axios.create({\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"64b816f4-c9e0-431f-be44-c151fe573295\"\n    },\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\"\n\n})\n\nexport type todolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type basicTodoType<T> = {\n    data: T\n    messages: Array<string>\n    resultCode: number\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type taskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\n\nexport type basicTaskType<T> = {\n    data: T\n    messages: Array<string>\n    resultCode: number\n}\n\nexport type updateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\n\n\n\nexport const todolistApi = {\n    getTodolist() {\n        return instance.get<todolistType[]>('todo-lists')\n    },\n    createTodolist( title: string ) {\n        return instance.post<basicTodoType<{item: todolistType}>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<basicTodoType<{}>>(`todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string)  {\n        return instance.put<basicTodoType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<any>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTasks(todolistId: string, title: string ) {\n        return instance.post<basicTaskType<taskType>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n            return instance.delete<basicTaskType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, title: string) {\n        return instance.put<basicTaskType<taskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, {title})\n    }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    label: string\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log(\"AddItemForm\")\n    const [inputTaskValue, setInputTaskValue] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newValue = (e.currentTarget.value.charAt(0).toUpperCase() + e.currentTarget.value.slice(1));\n        setInputTaskValue(newValue)\n\n    }\n\n    const onKeyPressInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n\n        if (e.key === 'Enter' && inputTaskValue.trim() !== '' && inputTaskValue.trim()) {\n\n            props.addItem(inputTaskValue.trim());\n            setInputTaskValue('')\n        }\n    }\n\n    const onClickButtonHandler = () => {\n        if (inputTaskValue.trim() !== '') {\n            props.addItem(inputTaskValue.trim());\n        } else {\n            setError('Title is required')\n        }\n        setInputTaskValue('')\n    }\n\n    return (\n        <div>\n            {error ?\n                <TextField error id=\"outlined-error\" label=\"Text is required\" size={\"small\"} value={inputTaskValue} onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler} className={'error'}/>\n                :\n                <TextField id=\"outlined-basic\" label={props.label} variant=\"outlined\" size={\"small\"} value={inputTaskValue} onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler} className={''}/>}\n\n            <Button style={{maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px', backgroundColor: 'black'}}  variant=\"contained\" onClick={onClickButtonHandler}>+</Button>\n        </div>\n    )\n})\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    let[EditMode, SetEditMode] = useState(false)\n    let[title, setTitle] = useState('')\n\n    const onDoubleClickHandler = () => {\n        SetEditMode(true)\n        setTitle(props.title)\n    }\n    const onBlurEventHandler = () => {\n        SetEditMode(false)\n        props.onChange(title)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter') {\n            SetEditMode(false)\n            props.onChange(title)\n        }\n    }\n\n    return EditMode ? <input onChange={onChangeHandler} onKeyPress={onKeyPressHandler} onBlur={onBlurEventHandler} value={title} autoFocus></input> : <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n})\n","import React, {ChangeEvent} from \"react\"\nimport {EditableSpan} from \"./EditableSpan\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {TaskStatuses} from \"./api/todolists-api\";\n\nexport const Task = (props: any) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n        props.changeTaskStatus(props.el.id, status, props.id)\n    }\n\n    const onChangeListItem = (newValue: string) => {\n        props.onCnangeListItemHandler(newValue, props.el.id, props.id)\n    }\n\n    return (\n        <li key={props.el.id} className={props.el.status === TaskStatuses.Completed ? 'is-done' : ''}>\n            <input\n                onChange={onChangeHandler}\n                type=\"checkbox\" checked={props.el.status === TaskStatuses.Completed}/>\n            <EditableSpan title={props.el.title} onChange={onChangeListItem}/>\n            <IconButton onClick={() => props.removeTask(props.el.id, props.id)} aria-label=\"delete\">\n                <Delete />\n            </IconButton>\n        </li>\n    )\n}\n\n","import {\n    addTodolistType, filterTasksAC, FilterValueType,\n    removeTodolistType,\n    selectAllItemsType,\n    setTodolistsType\n} from \"./todolists-reducer\";\nimport {v1} from \"uuid\";\nimport {TaskPriorities, TaskStatuses, taskType, todolistApi} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\n\n\n\nexport type tasksStateType = {\n    [key: string]: taskType[],\n}\n\n\nconst initialState: any = {\n}\n\nexport const tasksReducer = (state: tasksStateType = initialState, action: tasksReducerType) => {\n    switch (action.type) {\n        case \"SET-TODOLISTS\": {\n            const stateCopy = {...state}\n            action.payload.todolists.forEach(todolist => {\n                stateCopy[todolist.id] = []\n            })\n            return stateCopy\n        }\n        case \"REMOVE-TASK\": {\n            return {\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId]\n                .filter((task: taskType) => task.id !== action.payload.taskId )\n            }\n        }\n        case \"ADD-TASK\": {\n            let newTask = {\n                id: v1(),\n                title: action.payload.title,\n                status: TaskStatuses.New,\n                description: '',\n                priority: TaskPriorities.Low,\n                startDate: '',\n                deadline: '',\n                todoListId: action.payload.todolistId,\n                order: 0,\n                addedDate: ''\n            }\n            return {\n                ...state, [action.payload.todolistId]: [newTask, ...state[action.payload.todolistId]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            console.log(action.payload.status)\n            return {\n                ...state, [action.payload.todolistId] : state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, status: action.payload.status} : task\n\n                    } )\n            }\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {\n                ...state,  [action.payload.todolistId] : state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, title: action.payload.title} : task\n\n                    } )\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            return {\n                ...state, [action.payload.todolistId] : []\n            }\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.payload.todolistId]\n            return copyState\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            return {...action.payload.tasksObj}\n        }\n        case \"SET-TASKS\": {\n\n            return {...state, [action.payload.todolistId] : action.payload.tasks}\n        }\n        default: return state\n    }\n}\ntype tasksReducerType =  setTodolistsType | removeTaskType | addTaskType | changeTaskStatusType | changeTaskTitleType | addTodolistType | removeTodolistType | selectAllItemsType | SetTasksType\ntype removeTaskType = ReturnType<typeof removeTaskAC>\ntype addTaskType = ReturnType<typeof addTaskAC>\ntype changeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\ntype changeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\ntype SetTasksType = ReturnType<typeof SetTasksAC>\n\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\n    return {\n        type: 'REMOVE-TASK',\n        payload: {\n            taskId,\n            todolistId,\n        }\n    } as const\n}\nexport const addTaskAC = (todolistId: string, title: string) => {\n    return {\n        type: 'ADD-TASK',\n        payload: {\n            todolistId,\n            title\n        }\n    } as const\n}\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        payload: {\n            taskId,\n            status,\n            todolistId\n        }\n    } as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-TITLE',\n        payload: {\n            taskId,\n            title,\n            todolistId\n        }\n    } as const\n}\n\nexport const selectAllItemsAC = (isChecked : boolean, todolistID: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistID,\n            tasksObj\n        }\n    } as const\n}\n\nconst SetTasksAC = (tasks: tasksStateType, todolistId: string) => {\n    return {\n        type: \"SET-TASKS\",\n        payload: {\n            tasks,\n            todolistId\n        }\n    } as const\n}\n\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\n    todolistApi.getTasks(todolistId).then(response => {\n        dispatch(SetTasksAC(response.data.items, todolistId))\n    })\n}\n\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\n    todolistApi.deleteTask(todolistId, taskId).then(response => {\n        dispatch(removeTaskAC(todolistId, taskId))\n    })\n}\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    todolistApi.createTasks(todolistId, title).then(response => {\n        dispatch(addTaskAC(todolistId, title))\n    })\n}\n\n\n","import React, {ChangeEvent, useCallback, useEffect} from \"react\";\n\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport classes from './Todolist.module.css'\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {Task} from \"./Task\";\nimport { FilterValueType } from \"./state/todolists-reducer\";\nimport {TaskStatuses, taskType} from \"./api/todolists-api\";\nimport {useDispatch} from \"react-redux\";\nimport { fetchTaskTC } from \"./state/tasks-reducer\";\n\ntype PropsType = {\n    tasksArray: any\n    tasks: taskType[],\n    title: string,\n    removeTask: (id: string, todoListId: string) => void,\n    filterTasks: (value: FilterValueType, filterId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    filter: FilterValueType\n    id: string\n    removeTodoList: (todoListId: string) => void\n    onChangeListItemHandler: (newValue: string, id: string, todolistId: string) => void\n    changeTodolistTitle: (title :string, id: string) => void\n    selectAllItems: (todoListId: string, isChecked: boolean, tasks: any) => void\n    allSelectItem: boolean\n\n}\n\n\nexport const TodoList = React.memo((props: PropsType) => {\n    const onClickFilterHandlerAll = useCallback(() => props.filterTasks('all', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerActive = useCallback(() => props.filterTasks('active', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerComplited = useCallback(() => props.filterTasks( 'completed', props.id), [props.filterTasks, props.id])\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        // @ts-ignore\n        dispatch(fetchTaskTC(props.id))\n    }, [])\n\n    const removeTodolistHandler = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const onChangeTitleItem = useCallback((title: string) => {\n        props.changeTodolistTitle(title, props.id)\n    }, [props.changeTodolistTitle, props.id])\n\n    const onChangeAllItemsHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.selectAllItems(props.id, e.currentTarget.checked, props.tasksArray)\n        console.log('onChangeAllItemsHandler')\n    }\n\n    let tasksForTodoList = props.tasks\n\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter((el: any) => {\n            return el.status === TaskStatuses.New\n        })\n    }\n\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter((el: any) => {\n            return el.status === TaskStatuses.Completed;\n        })\n    }\n\n    return (\n        <div className={classes.todolistClass}>\n            <h3 className={classes.todolistHeader}>{<EditableSpan title={props.title} onChange={onChangeTitleItem}/>\n            }\n                <IconButton className={classes.todolistXBtn} onClick={removeTodolistHandler} aria-label=\"delete\">\n                    <Delete />\n                </IconButton>\n            </h3>\n            <AddItemForm label={'New task'} addItem={addTask}/>\n            <li className={classes.allItems}>\n                <input onChange={onChangeAllItemsHandler}\n                       className={classes.allItemsInput}\n                       type=\"checkbox\" checked={props.allSelectItem}/>\n            </li>\n            <ul className={classes.todolistItemsWrapper}>\n                {\n                    tasksForTodoList.map((el) => <Task el={el}\n                                                       changeTaskStatus={props.changeTaskStatus}\n                                                       onCnangeListItemHandler={props.onChangeListItemHandler}\n                                                       removeTask={props.removeTask}\n                                                       id={props.id}\n                                                       key={el.id}/>\n                )\n                }\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerAll}>All</button>\n                <button className={props.filter === 'active' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerActive}>Active</button>\n                <button className={props.filter === 'completed' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerComplited}>Completed</button>\n            </div>\n        </div>\n    )\n})\n\n","import {AppBar, Button, Toolbar, Typography} from \"@mui/material\";\nimport React from \"react\";\n\nconst Header = () => {\n    return <AppBar position=\"static\">\n        <Toolbar>\n            <Typography\n                variant=\"h6\"\n                noWrap\n                component=\"div\"\n                sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n                TODO LIST\n            </Typography>\n            <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n    </AppBar>\n}\n\nexport default Header;\n","import { Dispatch } from \"redux\";\nimport {v1} from \"uuid\";\nimport {todolistApi, todolistType} from \"./../api/todolists-api\"\n\nconst initialState: Array<todoListDomainType> = [];\n\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\n\nexport type todoListDomainType = todolistType & {\n    filter: FilterValueType\n    selectHandler: boolean\n}\n\nexport const todolistsReducer = (state: Array<todoListDomainType> = initialState, action: todolistsReducerType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(el => el.id !== action.payload.todolistId)\n        case \"ADD-TODOLIST\":\n             const todoList: todoListDomainType = {\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: \"all\",\n                selectHandler: false,\n                 addedDate: '',\n                 order: 0\n            }\n            return [todoList, ...state]\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, title: action.payload.title} : el)\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, filter: action.payload.filter} : el)\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            let todolist = state.find(todolist => todolist.id === action.payload.todolistId)\n            if(todolist) {\n                todolist.selectHandler = action.payload.isChecked\n                if(todolist.selectHandler) {\n                   action.payload.tasksObj[action.payload.todolistId].map((el:any) => {\n                       return el.status = true\n                    })\n                } else if(todolist.selectHandler === false) {\n                    action.payload.tasksObj[action.payload.todolistId].map((el:any) => {\n                       return el.status = false\n                    })\n                }\n            }\n            return [...state]\n        }\n        case \"SET-TODOLISTS\": {\n\n            return action.payload.todolists.map(todolist => {\n                return {...todolist, filter: 'all'}\n            })\n\n        }\n        default: return state\n    }\n}\ntype todolistsReducerType = removeTodolistType | addTodolistType | changeTodolistTitleType | filterTasksType | selectAllItemsType | setTodolistsType\nexport type removeTodolistType = ReturnType<typeof removeTodolistAC>\nexport type addTodolistType = ReturnType<typeof addTodolistAC>\ntype changeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>\ntype filterTasksType = ReturnType<typeof filterTasksAC>\nexport type selectAllItemsType = ReturnType<typeof selectAllItemsAC>\nexport type setTodolistsType = ReturnType<typeof setTodolistsAC>\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        payload: {\n            todolistId\n        }\n    } as const\n}\nexport const addTodolistAC = (title: string) => {\n    return {\n        type: 'ADD-TODOLIST',\n        payload: {\n            title,\n            todolistId: v1()\n        }\n    } as const\n}\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        payload: {\n            title,\n            todolistId\n        }\n    } as const\n}\nexport const filterTasksAC = (filter: FilterValueType, todolistId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        payload: {\n            filter,\n            todolistId\n        }\n    } as const\n}\nexport const selectAllItemsAC = (isChecked: boolean, todolistId: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistId,\n            tasksObj\n        }\n    } as const\n}\n\nexport const setTodolistsAC = (todolists: todolistType[]) => {\n    return {\n        type: 'SET-TODOLISTS',\n        payload: {\n            todolists\n        }\n    } as const\n}\n\n// Thunk\n\nexport const fetchTodosTC = () => (dispatch: Dispatch) => {\n        todolistApi.getTodolist().then(response => {\n            dispatch(setTodolistsAC(response.data))\n        })\n}\n\n\n\n\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport Header from \"./Header\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {todoListDomainType, FilterValueType, fetchTodosTC} from \"./state/todolists-reducer\"\r\nimport {addTaskTC, changeTaskStatusAC, removeTaskTC, tasksStateType} from \"./state/tasks-reducer\"\r\n\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    filterTasksAC,\r\n    removeTodolistAC, selectAllItemsAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskTitleAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses} from \"./api/todolists-api\";\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists = useSelector<AppRootStateType, todoListDomainType[]>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, tasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        dispatch(fetchTodosTC())\r\n    }, [])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodolistAC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    const filterTasks = useCallback((filter: FilterValueType, todoListId: string) => {\r\n        dispatch(filterTasksAC(filter, todoListId))\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((newValue: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleAC(newValue, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        // @ts-ignore\r\n        dispatch(addTaskTC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        // @ts-ignore\r\n        dispatch(removeTaskTC(todoListId, id));\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const onChangeListItemHandler = useCallback((newValue: string, id: string, todolistId: string) => {\r\n\r\n        dispatch(changeTaskTitleAC(id, newValue, todolistId));\r\n\r\n    }, [dispatch])\r\n\r\n    const selectAllItems = useCallback((todolistID: string, isChecked: boolean, tasks) => {\r\n        dispatch(selectAllItemsAC(isChecked, todolistID, tasks))\r\n    }, [dispatch, selectAllItemsAC, tasks])\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'New todolist'} addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((el: any) => {\r\n                            let tasksForTodoList = tasks[el.id];\r\n\r\n                            return <Grid key={el.id} item>\r\n                                <Paper key={el.id} style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        tasksArray = {tasks}\r\n                                        key={el.id}\r\n                                        id={el.id}\r\n                                        filter={el.filter}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodoList}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTask={removeTask}\r\n                                        filterTasks={filterTasks}\r\n                                        addTask={addTask}\r\n                                        removeTodoList={removeTodoList}\r\n                                        onChangeListItemHandler={onChangeListItemHandler}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        selectAllItems={selectAllItems}\r\n                                        allSelectItem={el.selectHandler}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport thunk from 'redux-thunk'\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <AppWithRedux />\r\n        </Provider>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistClass\":\"Todolist_todolistClass__13CLe\",\"todolistItemsWrapper\":\"Todolist_todolistItemsWrapper__2V9vo\",\"allItems\":\"Todolist_allItems__2FCq4\",\"allItemsInput\":\"Todolist_allItemsInput__fyrQM\",\"todolistHeader\":\"Todolist_todolistHeader__PNSfR\",\"todolistXBtn\":\"Todolist_todolistXBtn__23DZF\",\"btnFilterClasses\":\"Todolist_btnFilterClasses__3RND-\"};"],"sourceRoot":""}