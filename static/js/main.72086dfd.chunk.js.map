{"version":3,"sources":["serviceWorker.ts","api/todolists-api.tsx","state/app-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","Header.tsx","state/tasks-reducer.tsx","state/todolists-reducer.tsx","state/store.tsx","ErrorSnackbar.tsx","utils/Login.tsx","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","TodolistContainer.tsx","AppWithRedux.tsx","index.tsx","Todolist.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","headers","baseURL","todolistApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","initialState","status","error","entityStatus","setStatusAC","type","setErrorAC","handleNetworkError","dispatch","message","isLoggedIn","isAuthorized","setIsLoggedInAC","value","Header","useSelector","state","auth","useDispatch","AppBar","position","Toolbar","Typography","variant","noWrap","component","sx","flexGrow","display","xs","sm","Button","onClick","then","response","color","addTaskTC","resultCode","task","payload","addTaskAC","item","handleAppError","messages","catch","selectAllItemsAC","isChecked","tasksObj","changeTodolistEntityStatusAC","rootReducer","combineReducers","tasks","action","stateCopy","todolists","forEach","todolist","id","filter","todoListId","map","console","log","copyState","el","todoList","selectHandler","addedDate","order","find","todo","app","store","createStore","applyMiddleware","thunk","useAppSelector","Alert","React","props","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","width","validate","values","errors","email","test","password","length","Login","formik","useFormik","initialValues","rememberMe","onSubmit","resetForm","to","Grid","container","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","name","onChange","handleChange","onBlur","handleBlur","label","margin","touched","style","FormControlLabel","checked","control","Checkbox","AddItemForm","memo","useState","inputTaskValue","setInputTaskValue","setError","onChangeInputHandler","e","newValue","currentTarget","charAt","toUpperCase","slice","onKeyPressInputHandler","key","trim","addItem","disabled","size","onKeyPress","className","maxWidth","maxHeight","minWidth","minHeight","backgroundColor","EditableSpan","EditMode","SetEditMode","setTitle","autoFocus","onDoubleClick","Task","Completed","New","changeTaskStatus","onCnangeListItemHandler","IconButton","removeTask","aria-label","Delete","TodoList","onClickFilterHandlerAll","useCallback","filterTasks","onClickFilterHandlerActive","onClickFilterHandlerComplited","useEffect","SetTasksAC","items","addTask","onChangeTitleItem","changeTodolistTitle","tasksForTodoList","classes","todolistClass","todolistHeader","todolistXBtn","removeTodoList","allItems","selectAllItems","tasksArray","allItemsInput","allSelectItem","todolistItemsWrapper","onChangeListItemHandler","btnFilterClasses","TodolistContainer","navigate","useNavigate","removeTodolistAC","addTodolist","addTodolistAC","addTodolistTC","filterTasksAC","changeTodolistTitleAC","changeTodolistTitleTC","removeTaskAC","getState","currentTask","description","priority","startDate","deadline","changeTaskStatusAC","changeTaskStatusTC","changeTaskTitleAC","changeTaskTitleTC","todolistID","padding","spacing","Paper","AppWithRedux","res","LinearProgress","Container","fixed","path","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.72086dfd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst instance = axios.create({\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"64b816f4-c9e0-431f-be44-c151fe573295\"\n    },\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\"\n\n})\n\nexport type todolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type basicTodoType<T> = {\n    data: T\n    messages: Array<string>\n    resultCode: number\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type taskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type updateTaskModelType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\n\nexport type basicTaskType<T> = {\n    data: T\n    messages: Array<string>\n    resultCode: number\n}\n\nexport type updateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nexport type LoginResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {\n        userId: number\n    }\n}\n\n\n\nexport const todolistApi = {\n    getTodolist() {\n        return instance.get<todolistType[]>('todo-lists')\n    },\n    createTodolist( title: string ) {\n        return instance.post<basicTodoType<{item: todolistType}>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<basicTodoType<{}>>(`todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string)  {\n        return instance.put<basicTodoType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<any>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTasks(todolistId: string, title: string ) {\n        return instance.post<basicTaskType<taskType>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n            return instance.delete<basicTaskType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: updateTaskModelType) {\n        return instance.put<basicTaskType<taskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginResponseType>('auth/login', data)\n    },\n    logout() {\n        return instance.delete('auth/login')\n    },\n    me() {\n        return instance.get<LoginResponseType>('auth/me')\n    }\n\n}\n\n","import { Dispatch } from \"redux\"\nimport {authAPI} from \"../api/todolists-api\";\nimport {setIsLoggedInAC} from \"./auth-reducer\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: \"\" as RequestStatusType,\n    error: null as null | string,\n    entityStatus : 'idle'\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n   switch (action.type) {\n       case 'APP/SET-STATUS':\n           return {...state, status: action.status}\n       case \"APP/SET-ERROR\" :\n           return {...state, error: action.error}\n       default:\n           return state\n   }\n}\n\n\ntype setStatusType = ReturnType<typeof setStatusAC>\ntype setErrorType = ReturnType<typeof setErrorAC>\n\ntype ActionsType = setStatusType | setErrorType\n\n\nexport const setStatusAC = (status: RequestStatusType) => {\n        return {\n            type: \"APP/SET-STATUS\",\n            status\n        } as const\n}\n\nexport const setErrorAC = (error: null | string) => {\n    return {\n        type: \"APP/SET-ERROR\",\n        error\n    } as const\n}\n\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n        }\n    })\n}\n\n\n","import {setErrorAC, setStatusAC} from \"../state/app-reducer\"\n\nexport const handleNetworkError = (dispatch: any, message: string) => {\n    dispatch(setErrorAC(message))\n    dispatch(setStatusAC('failed'))\n}\n\nexport const handleAppError = (dispatch: any, message: string) => {\n    dispatch(setErrorAC(message))\n    dispatch(setStatusAC('failed'))\n}\n","import { Dispatch } from 'redux'\nimport {authAPI} from \"../api/todolists-api\";\nimport { setStatusAC } from './app-reducer';\nimport {AxiosError} from \"axios\";\nimport {handleNetworkError} from \"../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false,\n    isAuthorized: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n   switch (action.type) {\n       case 'login/SET-IS-LOGGED-IN':\n           return {...state, isLoggedIn: action.value}\n       default:\n           return state\n   }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n    // @ts-ignore\n    dispatch(setStatusAC('loading'))\n    authAPI.login(data)\n        .then(response => {\n            dispatch(setIsLoggedInAC(response.data.resultCode === 0))\n            // @ts-ignore\n            dispatch(setStatusAC('succeeded'))\n        })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    authAPI.logout()\n        .then(response => {\n            dispatch(setIsLoggedInAC(false))\n        })\n}\n\n// types\ntype ActionsType =  setLoggedType\ntype setLoggedType = ReturnType<typeof setIsLoggedInAC>\n","import {AppBar, Button, Toolbar, Typography} from \"@mui/material\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {logoutTC} from \"./state/auth-reducer\";\n\n\n\nconst Header = () => {\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const logoutHandler = () => {\n        // @ts-ignore\n        dispatch(logoutTC())\n    }\n\n    return <AppBar position=\"static\">\n        <Toolbar>\n            <Typography\n                variant=\"h6\"\n                noWrap\n                component=\"div\"\n                sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n                TODO LIST\n            </Typography>\n            {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\n        </Toolbar>\n    </AppBar>\n}\n\nexport default Header;\n","import {\n    addTodolistType,\n    removeTodolistType,\n    selectAllItemsType,\n    setTodolistsType\n} from \"./todolists-reducer\";\nimport {TaskStatuses, taskType, todolistApi, updateTaskModelType} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"./store\";\nimport {setErrorAC, setStatusAC} from \"./app-reducer\";\nimport {AxiosError} from \"axios\";\nimport {handleAppError, handleNetworkError} from \"../utils/error-utils\";\n\n\nexport type tasksStateType = {\n    [key: string]: taskType[],\n}\n\nconst initialState: any = {}\n\nexport const tasksReducer = (state: tasksStateType = initialState, action: tasksReducerType) => {\n    switch (action.type) {\n        case \"SET-TODOLISTS\": {\n            const stateCopy = {...state}\n            action.payload.todolists.forEach(todolist => {\n                stateCopy[todolist.id] = []\n            })\n            return stateCopy\n        }\n        case \"REMOVE-TASK\": {\n            return {\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId]\n                    .filter((task: taskType) => task.id !== action.payload.taskId)\n            }\n        }\n        case \"ADD-TASK\": {\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, status: action.payload.status} : task\n                    })\n            }\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            console.log(state)\n            console.log(action.payload.todolistId)\n            return {\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, title: action.payload.title} : task\n                    })\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            return {\n                ...state, [action.payload.todolistId]: []\n            }\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.payload.todolistId]\n            return copyState\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            return {...action.payload.tasksObj}\n        }\n        case \"SET-TASKS\": {\n\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\n        }\n        default:\n            return state\n    }\n}\ntype tasksReducerType =\n    setTodolistsType\n    | removeTaskType\n    | addTaskType\n    | changeTaskStatusType\n    | changeTaskTitleType\n    | addTodolistType\n    | removeTodolistType\n    | selectAllItemsType\n    | SetTasksType\ntype removeTaskType = ReturnType<typeof removeTaskAC>\ntype addTaskType = ReturnType<typeof addTaskAC>\ntype changeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\ntype changeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\ntype SetTasksType = ReturnType<typeof SetTasksAC>\n\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\n    return {\n        type: 'REMOVE-TASK',\n        payload: {\n            taskId,\n            todolistId,\n        }\n    } as const\n}\nexport const addTaskAC = (todolistId: string, title: string, task: taskType) => {\n    return {\n        type: 'ADD-TASK',\n        payload: {\n            todolistId,\n            title,\n            task\n        }\n    } as const\n}\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, status: TaskStatuses) => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        payload: {\n            taskId,\n            status,\n            todolistId\n        }\n    } as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-TITLE',\n        payload: {\n            taskId,\n            title,\n            todolistId\n        }\n    } as const\n}\n\nexport const selectAllItemsAC = (isChecked: boolean, todolistID: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistID,\n            tasksObj\n        }\n    } as const\n}\n\nconst SetTasksAC = (tasks: tasksStateType, todolistId: string) => {\n    return {\n        type: \"SET-TASKS\",\n        payload: {\n            tasks,\n            todolistId\n        }\n    } as const\n}\n\n//Thunk\n\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistApi.getTasks(todolistId).then(response => {\n        dispatch(SetTasksAC(response.data.items, todolistId))\n        dispatch(setStatusAC('succeeded'))\n    })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n}\n\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistApi.deleteTask(todolistId, taskId).then(response => {\n        dispatch(removeTaskAC(todolistId, taskId))\n        dispatch(setStatusAC('succeeded'))\n    })\n}\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistApi.createTasks(todolistId, title)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                // @ts-ignore\n                dispatch(addTaskAC(todolistId, title, response.data.data.item))\n                dispatch(setStatusAC('succeeded'))\n            } else {\n                handleAppError(dispatch, response.data.messages[0])\n            }\n\n\n        })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n\n}\n\n\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n\n    const state = getState()\n    const tasks = state.tasks\n    const currentTask = tasks[todolistId].find((task: taskType) => task.id === taskId)\n\n    const model: updateTaskModelType = {\n        description: currentTask.description,\n        status: status,\n        title: currentTask.title,\n        priority: currentTask.priority,\n        startDate: currentTask.startDate,\n        deadline: currentTask.deadline\n    }\n    dispatch(setStatusAC('loading'))\n    todolistApi.updateTask(todolistId, taskId, model).then(response => {\n        dispatch(changeTaskStatusAC(todolistId, taskId, status))\n        dispatch(setStatusAC('succeeded'))\n    })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n\n}\n\nexport const changeTaskTitleTC = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    const state = getState()\n    const tasks = state.tasks\n    const currentTask = tasks[todolistId].find((task: taskType) => task.id === taskId)\n\n    const model: updateTaskModelType = {\n        description: currentTask.description,\n        status: currentTask.status,\n        title: title,\n        priority: currentTask.priority,\n        startDate: currentTask.startDate,\n        deadline: currentTask.deadline\n    }\n\n    todolistApi.updateTask(todolistId, taskId, model).then(response => {\n        dispatch(changeTaskTitleAC(taskId, title, todolistId))\n    })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n}\n\n\n\n","import {Dispatch} from \"redux\";\nimport {todolistApi, todolistType} from \"../api/todolists-api\"\nimport {RequestStatusType, setErrorAC, setStatusAC} from \"./app-reducer\";\nimport {AxiosError} from \"axios\";\nimport {handleNetworkError} from \"../utils/error-utils\";\nimport {setIsLoggedInAC} from \"./auth-reducer\";\n\nconst initialState: Array<todoListDomainType> = [];\n\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\n\nexport type todoListDomainType = todolistType & {\n    filter: FilterValueType\n    selectHandler: boolean\n}\n\nexport const todolistsReducer = (state: Array<todoListDomainType> = initialState, action: todolistsReducerType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(el => el.id !== action.payload.todolistId)\n        case \"ADD-TODOLIST\":\n\n            const todoList: todoListDomainType = {\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: \"all\",\n                selectHandler: false,\n                addedDate: '',\n                order: 0,\n            }\n            return [todoList, ...state]\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, title: action.payload.title} : el)\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, filter: action.payload.filter} : el)\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            let todolist = state.find(todolist => todolist.id === action.payload.todolistId)\n            if (todolist) {\n                todolist.selectHandler = action.payload.isChecked\n                if (todolist.selectHandler) {\n                    action.payload.tasksObj[action.payload.todolistId].map((el: any) => {\n                        return el.status = true\n                    })\n                } else if (todolist.selectHandler === false) {\n                    action.payload.tasksObj[action.payload.todolistId].map((el: any) => {\n                        return el.status = false\n                    })\n                }\n            }\n            return [...state]\n        }\n        case \"SET-TODOLISTS\": {\n\n            return action.payload.todolists.map(todolist => {\n                return {...todolist, filter: 'all', entityStatus: 'idle'}\n            })\n\n        }\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\n            return state.map(todo => {\n                if (todo.id === action.todolistId) {\n                    return {...todo, entityStatus: \"loading\"}\n                } else {\n                    return todo\n                }\n            })\n        }\n        default:\n            return state\n    }\n}\n\nexport type removeTodolistType = ReturnType<typeof removeTodolistAC>\nexport type addTodolistType = ReturnType<typeof addTodolistAC>\nexport type changeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>\nexport type filterTasksType = ReturnType<typeof filterTasksAC>\nexport type selectAllItemsType = ReturnType<typeof selectAllItemsAC>\nexport type setTodolistsType = ReturnType<typeof setTodolistsAC>\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\n\ntype todolistsReducerType =\n    removeTodolistType\n    | addTodolistType\n    | changeTodolistTitleType\n    | filterTasksType\n    | selectAllItemsType\n    | setTodolistsType\n    | changeTodolistEntityStatusType\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        payload: {\n            todolistId\n        }\n    } as const\n}\nexport const addTodolistAC = (title: string, todolistId: string) => {\n    return {\n        type: 'ADD-TODOLIST',\n        payload: {\n            title,\n            todolistId\n        }\n    } as const\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        payload: {\n            title,\n            todolistId\n        }\n    } as const\n}\nexport const filterTasksAC = (filter: FilterValueType, todolistId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        payload: {\n            filter,\n            todolistId\n        }\n    } as const\n}\nexport const selectAllItemsAC = (isChecked: boolean, todolistId: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistId,\n            tasksObj\n        }\n    } as const\n}\n\nexport const setTodolistsAC = (todolists: todolistType[]) => {\n    return {\n        type: 'SET-TODOLISTS',\n        payload: {\n            todolists\n        }\n    } as const\n}\n\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, todolistId: string) => {\n    return {\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\n        entityStatus,\n        todolistId\n\n    } as const\n}\n\n// Thunk\n\nexport const fetchTodosTC = () => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistApi.getTodolist().then(response => {\n        dispatch(setTodolistsAC(response.data))\n        dispatch(setStatusAC('succeeded'))\n    })\n        .catch(() => {\n            dispatch(setStatusAC('succeeded'))\n        })\n}\n\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistApi.createTodolist(title).then(response => {\n        dispatch(addTodolistAC(title, response.data.data.item.id))\n        console.log(response.data.data.item.id)\n        dispatch(setStatusAC('succeeded'))\n    })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n}\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n\n    todolistApi.updateTodolist(todolistId, title).then(response => {\n        dispatch(changeTodolistTitleAC(todolistId, title))\n        dispatch(setStatusAC('succeeded'))\n\n    })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n}\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(\"loading\", todolistId))\n    todolistApi.deleteTodolist(todolistId)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(removeTodolistAC(todolistId))\n                dispatch(setStatusAC('succeeded'))\n            } else {\n                dispatch(setErrorAC(\"some error\"))\n            }\n            dispatch(setStatusAC('failed'))\n            dispatch(changeTodolistEntityStatusAC(\"failed\", todolistId))\n        })\n        .catch((error: AxiosError) => {\n            handleNetworkError(dispatch, error.message)\n        })\n\n}\n\n\n\n","\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport thunk from 'redux-thunk'\nimport { appReducer } from './app-reducer';\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport { authReducer } from './auth-reducer';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { useAppSelector} from \"./state/store\";\nimport {useDispatch} from \"react-redux\";\nimport {setErrorAC} from \"./state/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n    const error = useAppSelector((state) => state.app.error )\n    const dispatch = useDispatch()\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n      dispatch(setErrorAC(null))\n\n  };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={16000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>{error}</Alert>\n        </Snackbar>\n    );\n}\n\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from 'formik';\nimport { loginTC } from '../state/auth-reducer';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport { Navigate } from 'react-router-dom';\nimport {fetchTodosTC} from \"../state/todolists-reducer\";\n\nconst validate = (values: any) => {\n    const errors: any = {};\n    if (!values.email) {\n        errors.email = 'Field can\\'t be empty';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n    }\n\n    if (!values.password) {\n        errors.password = 'Field can\\'t be empty' ;\n    } else if (values.password.length > 20 ) {\n        errors.password = 'Must be 20 characters or less';\n    } else if (values.password.length < 8) {\n        errors.password = 'Must be 8 characters or more';\n    }\n\n    return errors;\n};\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            // @ts-ignore\n            dispatch(loginTC(values));\n            formik.resetForm();\n        },\n        validate,\n\n    })\n\n    if(isLoggedIn) {\n       return <Navigate to={\"/\"} />\n    }\n\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField id=\"email\"\n                                   name=\"email\"\n                                   type=\"email\"\n                                   onChange={formik.handleChange}\n                                   onBlur={formik.handleBlur}\n                                   value={formik.values.email}\n                                   label=\"Email\"\n                                   margin=\"normal\"/>\n                        {formik.touched.email && formik.errors.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                        <TextField id=\"password\"\n                                   name=\"password\"\n                                   type=\"password\"\n                                   onChange={formik.handleChange}\n                                   onBlur={formik.handleBlur}\n                                   value={formik.values.password}\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color: \"red\"}}>{formik.errors.password}</div> }\n                        <FormControlLabel id=\"rememberMe\"\n                                          name=\"rememberMe\"\n                                          checked={formik.values.rememberMe}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.rememberMe}\n                                          label={'Remember me'}\n                                          control={<Checkbox/>}/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    label: string\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log(\"AddItemForm\")\n    const [inputTaskValue, setInputTaskValue] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newValue = (e.currentTarget.value.charAt(0).toUpperCase() + e.currentTarget.value.slice(1));\n        setInputTaskValue(newValue)\n\n    }\n\n    const onKeyPressInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n\n        if (e.key === 'Enter' && inputTaskValue.trim() !== '' && inputTaskValue.trim()) {\n\n            props.addItem(inputTaskValue.trim());\n            setInputTaskValue('')\n        }\n    }\n\n    const onClickButtonHandler = () => {\n        if (inputTaskValue.trim() !== '') {\n            props.addItem(inputTaskValue.trim());\n        } else {\n            setError('Title is required')\n        }\n        setInputTaskValue('')\n    }\n\n    return (\n        <div >\n            {error ?\n                <TextField disabled={props.disabled} error id=\"outlined-error\" label=\"Text is required\" size={\"small\"} value={inputTaskValue}\n                           onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler} className={'error'}/>\n                :\n                <TextField disabled={props.disabled} id=\"outlined-basic\" label={props.label} variant=\"outlined\" size={\"small\"}\n                           value={inputTaskValue} onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler}\n                           className={''}/>}\n\n            <Button disabled={props.disabled} style={{\n                maxWidth: '40px',\n                maxHeight: '40px',\n                minWidth: '40px',\n                minHeight: '40px',\n                backgroundColor: 'black'\n            }} variant=\"contained\" onClick={onClickButtonHandler}>+</Button>\n        </div>\n    )\n})\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    let[EditMode, SetEditMode] = useState(false)\n    let[title, setTitle] = useState('')\n\n    const onDoubleClickHandler = () => {\n        SetEditMode(true)\n        setTitle(props.title)\n    }\n    const onBlurEventHandler = () => {\n        SetEditMode(false)\n        props.onChange(title)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter') {\n            SetEditMode(false)\n            props.onChange(title)\n        }\n    }\n\n    return EditMode ? <input onChange={onChangeHandler} onKeyPress={onKeyPressHandler} onBlur={onBlurEventHandler} value={title} autoFocus></input> : <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n})\n","import React, {ChangeEvent} from \"react\"\nimport {EditableSpan} from \"./EditableSpan\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {TaskStatuses} from \"./api/todolists-api\";\n\nexport const Task = (props: any) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n        props.changeTaskStatus(props.el.id, status, props.id)\n        console.log('onChangeHandler')\n    }\n\n    const onChangeListItem = (newValue: string) => {\n        props.onCnangeListItemHandler(newValue, props.el.id, props.id)\n    }\n\n    return (\n        <li key={props.el.id} className={props.el.status === TaskStatuses.Completed ? 'is-done' : ''}>\n            <input\n                onChange={onChangeHandler}\n                type=\"checkbox\" checked={props.el.status === TaskStatuses.Completed}/>\n            <EditableSpan title={props.el.title} onChange={onChangeListItem}/>\n            <IconButton disabled={props.status === \"loading\"} onClick={() => props.removeTask(props.el.id, props.id)} aria-label=\"delete\">\n                <Delete />\n            </IconButton>\n        </li>\n    )\n}\n\n","import React, {ChangeEvent, useCallback, useEffect} from \"react\";\n\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport classes from './Todolist.module.css'\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {Task} from \"./Task\";\nimport { FilterValueType } from \"./state/todolists-reducer\";\nimport {TaskStatuses, taskType} from \"./api/todolists-api\";\nimport {useDispatch} from \"react-redux\";\nimport { fetchTaskTC } from \"./state/tasks-reducer\";\nimport {RequestStatusType} from \"./state/app-reducer\";\n\ntype PropsType = {\n    tasksArray: any\n    tasks: taskType[],\n    title: string,\n    removeTask: (id: string, todoListId: string) => void,\n    filterTasks: (value: FilterValueType, filterId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    filter: FilterValueType\n    id: string\n    removeTodoList: (todoListId: string) => void\n    onChangeListItemHandler: (newValue: string, id: string, todolistId: string) => void\n    changeTodolistTitle: (title :string, id: string) => void\n    selectAllItems: (todoListId: string, isChecked: boolean, tasks: any) => void\n    allSelectItem: boolean\n    status: RequestStatusType\n    entityStatus: RequestStatusType | string\n\n}\n\n\nexport const TodoList = React.memo((props: PropsType) => {\n    const onClickFilterHandlerAll = useCallback(() => props.filterTasks('all', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerActive = useCallback(() => props.filterTasks('active', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerComplited = useCallback(() => props.filterTasks( 'completed', props.id), [props.filterTasks, props.id])\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        // @ts-ignore\n\n        dispatch(fetchTaskTC(props.id))\n    }, [])\n\n    const removeTodolistHandler = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const onChangeTitleItem = useCallback((title: string) => {\n        props.changeTodolistTitle(title, props.id)\n    }, [props.changeTodolistTitle, props.id])\n\n    const onChangeAllItemsHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.selectAllItems(props.id, e.currentTarget.checked, props.tasksArray)\n        console.log('onChangeAllItemsHandler')\n    }\n\n    let tasksForTodoList = props.tasks\n\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter((el: any) => {\n            return el.status === TaskStatuses.New\n        })\n    }\n\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter((el: any) => {\n            return el.status === TaskStatuses.Completed;\n        })\n    }\n\n    return (\n        <div className={classes.todolistClass}>\n            <h3 className={classes.todolistHeader}>{<EditableSpan title={props.title} onChange={onChangeTitleItem}/>\n            }\n                <IconButton disabled={props.entityStatus === 'loading'} className={classes.todolistXBtn} onClick={removeTodolistHandler} aria-label=\"delete\">\n                    <Delete />\n                </IconButton>\n            </h3>\n            <AddItemForm disabled={props.entityStatus === 'loading'} label={'New task'} addItem={addTask}/>\n            <li className={classes.allItems}>\n                <input onChange={onChangeAllItemsHandler}\n                       className={classes.allItemsInput}\n                       type=\"checkbox\" checked={props.allSelectItem}/>\n            </li>\n            <ul className={classes.todolistItemsWrapper}>\n                {\n                    tasksForTodoList.map((el) => <Task el={el}\n                                                       status={props.status}\n                                                       changeTaskStatus={props.changeTaskStatus}\n                                                       onCnangeListItemHandler={props.onChangeListItemHandler}\n                                                       removeTask={props.removeTask}\n                                                       id={props.id}\n                                                       key={el.id}/>\n                )\n                }\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerAll}>All</button>\n                <button className={props.filter === 'active' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerActive}>Active</button>\n                <button className={props.filter === 'completed' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerComplited}>Completed</button>\n            </div>\n        </div>\n    )\n})\n\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\n\r\nimport {\r\n    todoListDomainType,\r\n    FilterValueType,\r\n    fetchTodosTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC, removeTodolistTC\r\n} from \"./state/todolists-reducer\"\r\nimport {addTaskTC, changeTaskStatusTC, changeTaskTitleTC, removeTaskTC, tasksStateType} from \"./state/tasks-reducer\"\r\n\r\nimport {\r\n    filterTasksAC,\r\n    selectAllItemsAC\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppSelector} from \"./state/store\";\r\nimport {TaskStatuses} from \"./api/todolists-api\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport function TodolistContainer() {\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    let todolists = useSelector<AppRootStateType, todoListDomainType[]>(state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType, tasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector((state) => state.app.status)\r\n\r\n    const navigate = useNavigate()\r\n\r\n\r\n    useEffect(() => {\r\n        if(isLoggedIn) {\r\n            // @ts-ignore\r\n            dispatch(fetchTodosTC())\r\n        } else {\r\n            navigate('login')\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodolistTC(todoListId) as any)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        console.log('add todo')\r\n        dispatch(addTodolistTC(title) as any)\r\n    }, [dispatch])\r\n\r\n    const filterTasks = useCallback((filter: FilterValueType, todoListId: string) => {\r\n        dispatch(filterTasksAC(filter, todoListId))\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((newValue: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newValue) as any)\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskTC(todoListId, title) as any)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        dispatch(removeTaskTC(todoListId, id) as any);\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(changeTaskStatusTC(todoListId, taskId, status) as any)\r\n    }, [dispatch])\r\n\r\n\r\n    const onChangeListItemHandler = useCallback((newValue: string, id: string, todolistId: string) => {\r\n\r\n        dispatch(changeTaskTitleTC(id, newValue, todolistId) as any);\r\n\r\n    }, [dispatch])\r\n\r\n    const selectAllItems = useCallback((todolistID: string, isChecked: boolean, tasks) => {\r\n        dispatch(selectAllItemsAC(isChecked, todolistID, tasks))\r\n    }, [dispatch, selectAllItemsAC, tasks])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm disabled={false} label={'New todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map((el: any) => {\r\n                        let tasksForTodoList = tasks[el.id];\r\n\r\n                        return <Grid key={el.id} item>\r\n                            <Paper key={el.id} style={{padding: \"10px\"}}>\r\n                                <TodoList\r\n                                    entityStatus={el.entityStatus}\r\n                                    status={status}\r\n                                    tasksArray={tasks}\r\n                                    key={el.id}\r\n                                    id={el.id}\r\n                                    filter={el.filter}\r\n                                    title={el.title}\r\n                                    tasks={tasksForTodoList}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    removeTask={removeTask}\r\n                                    filterTasks={filterTasks}\r\n                                    addTask={addTask}\r\n                                    removeTodoList={removeTodoList}\r\n                                    onChangeListItemHandler={onChangeListItemHandler}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    selectAllItems={selectAllItems}\r\n                                    allSelectItem={el.selectHandler}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport {Container} from \"@mui/material\";\r\nimport {Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {useAppSelector} from \"./state/store\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar\";\r\nimport {Login} from \"./utils/Login\";\r\nimport {TodolistContainer} from \"./TodolistContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeAppTC} from \"./state/app-reducer\";\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const status = useAppSelector((state) => state.app.status )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        // @ts-ignore\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {status === \"loading\" && <LinearProgress style={{\"width\": \"100%\"}} color=\"secondary\"/>}\r\n\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistContainer/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/404\"} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={\"*\"} element={<Navigate to=\"/404\"/>} />\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <AppWithRedux />\r\n            </BrowserRouter>\r\n        </Provider>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistClass\":\"Todolist_todolistClass__13CLe\",\"todolistItemsWrapper\":\"Todolist_todolistItemsWrapper__2V9vo\",\"allItems\":\"Todolist_allItems__2FCq4\",\"allItemsInput\":\"Todolist_allItemsInput__fyrQM\",\"todolistHeader\":\"Todolist_todolistHeader__PNSfR\",\"todolistXBtn\":\"Todolist_todolistXBtn__23DZF\",\"btnFilterClasses\":\"Todolist_btnFilterClasses__3RND-\"};"],"sourceRoot":""}