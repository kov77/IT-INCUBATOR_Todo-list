{"version":3,"sources":["Todolist.module.css","serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","Header.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","inputTaskValue","setInputTaskValue","error","setError","onChangeInputHandler","e","newValue","currentTarget","value","charAt","toUpperCase","slice","onKeyPressInputHandler","key","trim","addItem","TextField","id","label","size","onChange","onKeyPress","className","variant","Button","style","maxWidth","maxHeight","minWidth","minHeight","backgroundColor","onClick","EditableSpan","EditMode","SetEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","TodoList","onClickFilterHandlerAll","useCallback","filterTasks","onClickFilterHandlerActive","onClickFilterHandlerComplited","addTask","onChangeTitleItem","changeTodolistTitle","tasks","filter","el","isDone","classes","todolistClass","todolistHeader","IconButton","todolistXBtn","removeTodoList","aria-label","Delete","todolistItemsWrapper","allItems","selectAllItems","checked","allItemsInput","type","allSelectItem","map","index","changeTaskStatus","onCnangeListItemHandler","removeTask","btnFilterClasses","Header","AppBar","position","Toolbar","Typography","noWrap","component","sx","flexGrow","display","xs","sm","color","initialState","AppWithRedux","v1","todolists","useSelector","state","dispatch","useDispatch","todoListId","payload","todolistId","addTodolist","addTodolistAC","filterTasksAC","changeTodolistTitleAC","addTasktAC","taskId","changeTaskStatusAC","changeTaskTitleAC","todolistID","isChecked","tasksObj","selectAllItemsAC","Container","fixed","Grid","container","padding","spacing","tasksForTodoList","item","Paper","selectHandler","rootReducer","combineReducers","action","task","newTask","copyState","todoList","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fcacfb17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistClass\":\"Todolist_todolistClass__13CLe\",\"todolistItemsWrapper\":\"Todolist_todolistItemsWrapper__2V9vo\",\"allItems\":\"Todolist_allItems__2FCq4\",\"allItemsInput\":\"Todolist_allItemsInput__fyrQM\",\"todolistHeader\":\"Todolist_todolistHeader__PNSfR\",\"todolistXBtn\":\"Todolist_todolistXBtn__23DZF\",\"btnFilterClasses\":\"Todolist_btnFilterClasses__3RND-\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    label: string\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log(\"AddItemForm\")\n    const [inputTaskValue, setInputTaskValue] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newValue = (e.currentTarget.value.charAt(0).toUpperCase() + e.currentTarget.value.slice(1));\n        setInputTaskValue(newValue)\n\n    }\n\n    const onKeyPressInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n\n        if (e.key === 'Enter' && inputTaskValue.trim() !== '' && inputTaskValue.trim()) {\n\n            props.addItem(inputTaskValue.trim());\n            setInputTaskValue('')\n        }\n    }\n\n    const onClickButtonHandler = () => {\n        if (inputTaskValue.trim() !== '') {\n            props.addItem(inputTaskValue.trim());\n        } else {\n            setError('Title is required')\n        }\n        setInputTaskValue('')\n    }\n\n    return (\n        <div>\n            {error ?\n                <TextField error id=\"outlined-error\" label=\"Text is required\" size={\"small\"} value={inputTaskValue} onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler} className={'error'}/>\n                :\n                <TextField id=\"outlined-basic\" label={props.label} variant=\"outlined\" size={\"small\"} value={inputTaskValue} onChange={onChangeInputHandler} onKeyPress={onKeyPressInputHandler} className={''}/>}\n\n            <Button style={{maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px', backgroundColor: 'black'}}  variant=\"contained\" onClick={onClickButtonHandler}>+</Button>\n        </div>\n    )\n})\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    let[EditMode, SetEditMode] = useState(false)\n    let[title, setTitle] = useState('')\n\n    const onDoubleClickHandler = () => {\n        SetEditMode(true)\n        setTitle(props.title)\n    }\n    const onBlurEventHandler = () => {\n        SetEditMode(false)\n        props.onChange(title)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter') {\n            SetEditMode(false)\n            props.onChange(title)\n        }\n    }\n\n    return EditMode ? <input onChange={onChangeHandler} onKeyPress={onKeyPressHandler} onBlur={onBlurEventHandler} value={title} autoFocus></input> : <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n})\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {FilterValueType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport classes from './Todolist.module.css'\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype PropsType = {\n    tasks: taskType[],\n    title: string,\n    removeTask: (id: string, todoListId: string) => void,\n    filterTasks: (value: FilterValueType, filterId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\n    filter: FilterValueType\n    id: string\n    removeTodoList: (todoListId: string) => void\n    onCnangeListItemHandler: (newValue: string, id: string, todolistId: string) => void\n    changeTodolistTitle: (title :string, id: string) => void\n    selectAllItems: (todoListId: string, isChecked: boolean) => void\n    allSelectItem: boolean\n\n}\n\nexport type taskType = {\n    id: string,\n    title: string,\n    isDone: boolean\n}\n\nexport const TodoList = React.memo((props: PropsType) => {\n    const onClickFilterHandlerAll = useCallback(() => props.filterTasks('all', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerActive = useCallback(() => props.filterTasks('active', props.id), [props.filterTasks, props.id])\n    const onClickFilterHandlerComplited = useCallback(() => props.filterTasks( 'completed', props.id), [props.filterTasks, props.id])\n\n    const removeTodolistHandler = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const onChangeTitleItem = useCallback((title: string) => {\n        props.changeTodolistTitle(title, props.id)\n    }, [props.changeTodolistTitle, props.id])\n\n    const onChangeAllItemsHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.selectAllItems(props.id, e.currentTarget.checked)\n    }\n\n    let tasksForTodoList = props.tasks\n\n    if (props.filter === \"active\") {\n        tasksForTodoList = props.tasks.filter((el: any) => {\n            return el.isDone === false;\n        })\n    }\n\n    if (props.filter === \"completed\") {\n        tasksForTodoList = props.tasks.filter((el: any) => {\n            return el.isDone === true;\n        })\n    }\n\n    return (\n        <div className={classes.todolistClass}>\n            <h3 className={classes.todolistHeader}>{<EditableSpan title={props.title} onChange={onChangeTitleItem}/>\n            }\n                <IconButton className={classes.todolistXBtn} onClick={removeTodolistHandler} aria-label=\"delete\">\n                    <Delete />\n                </IconButton>\n            </h3>\n            <AddItemForm label={'New task'} addItem={addTask}/>\n            <ul className={classes.todolistItemsWrapper}>\n                <li className={classes.allItems}>\n                    <input onChange={onChangeAllItemsHandler}\n                           className={classes.allItemsInput}\n                           type=\"checkbox\" checked={props.allSelectItem}/>\n                </li>\n                {\n                    props.tasks.map((el, index) => {\n                       const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                           props.changeTaskStatus(el.id, e.currentTarget.checked, props.id)\n                       }\n\n                       const onCnangeListItem = (newValue: string) => {\n                            props.onCnangeListItemHandler(newValue, el.id, props.id)\n                        }\n                    return (\n                        <li key={el.id} className={el.isDone ? 'is-done' : ''}>\n                            <input\n                                onChange={onChangeHandler}\n                                type=\"checkbox\" checked={el.isDone}/>\n                               <EditableSpan title={el.title} onChange={onCnangeListItem}/>\n                            <IconButton onClick={() => props.removeTask(el.id, props.id)} aria-label=\"delete\">\n                                <Delete />\n                            </IconButton>\n                        </li>\n\n                    )\n                })\n                }\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerAll}>All</button>\n                <button className={props.filter === 'active' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerActive}>Active</button>\n                <button className={props.filter === 'completed' ? `active-filter` : classes.btnFilterClasses } onClick={onClickFilterHandlerComplited}>Completed</button>\n            </div>\n        </div>\n    )\n})\n\n","import {AppBar, Button, Toolbar, Typography} from \"@mui/material\";\nimport React from \"react\";\n\nconst Header = () => {\n    return <AppBar position=\"static\">\n        <Toolbar>\n            <Typography\n                variant=\"h6\"\n                noWrap\n                component=\"div\"\n                sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n                TODO LIST\n            </Typography>\n            <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n    </AppBar>\n}\n\nexport default Header;\n","import {FilterValueType, todoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\nconst initialState: Array<todoListType> = []\n\nexport const todolistsReducer = (state: Array<todoListType> = initialState, action: todolistsReducerType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(el => el.id !== action.payload.todolistId)\n        case \"ADD-TODOLIST\":\n            const todoList: todoListType = {\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: \"all\",\n                selectHandler: false\n            }\n            return [todoList, ...state]\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, title: action.payload.title} : el)\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(el => el.id === action.payload.todolistId ? {...el, filter: action.payload.filter} : el)\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            let todolist = state.find(todolist => todolist.id === action.payload.todolistId)\n            if(todolist) {\n                todolist.selectHandler = action.payload.isChecked\n                if(todolist.selectHandler) {\n                   return action.payload.tasksObj[action.payload.todolistId].map((el:any) => {\n                        el.isDone = true\n                    })\n                } else if(todolist.selectHandler === false) {\n                    return action.payload.tasksObj[action.payload.todolistId].map((el:any) => {\n                        el.isDone = false\n                    })\n                }\n            }\n            return [...state]\n        }\n        default: return state\n    }\n}\ntype todolistsReducerType = removeTodolistType | addTodolistType | changeTodolistTitleType | filterTasksType | selectAllItemsType\nexport type removeTodolistType = ReturnType<typeof removeTodolistAC>\nexport type addTodolistType = ReturnType<typeof addTodolistAC>\ntype changeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>\ntype filterTasksType = ReturnType<typeof filterTasksAC>\nexport type selectAllItemsType = ReturnType<typeof selectAllItemsAC>\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        payload: {\n            todolistId\n        }\n    } as const\n}\nexport const addTodolistAC = (title: string) => {\n    return {\n        type: 'ADD-TODOLIST',\n        payload: {\n            title,\n            todolistId: v1()\n        }\n    } as const\n}\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        payload: {\n            title,\n            todolistId\n        }\n    } as const\n}\nexport const filterTasksAC = (filter: FilterValueType, todolistId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        payload: {\n            filter,\n            todolistId\n        }\n    } as const\n}\nexport const selectAllItemsAC = (isChecked: boolean, todolistId: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistId,\n            tasksObj\n        }\n    } as const\n}\n\n","import {addTodolistType, removeTodolistType, selectAllItemsType} from \"./todolists-reducer\";\nimport {v1} from \"uuid\";\nimport {taskType} from \"../TodoList\";\nimport {tasksStateType} from \"../AppWithRedux\";\n\nconst initialState: any = {}\n\nexport const tasksReducer = (state: tasksStateType = initialState, action: tasksReducerType) => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].\n                filter((task: taskType) => task.id !== action.payload.taskId )\n            }\n        }\n        case \"ADD-TASK\": {\n            let newTask = {id: v1(), title: action.payload.title, isDone: false}\n            return {\n                ...state, [action.payload.todolistId]: [newTask, ...state[action.payload.todolistId]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {\n                ...state, [action.payload.todolistId] : state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, isDone: action.payload.isDone} : task\n\n                    } )\n            }\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {\n                ...state,  [action.payload.todolistId] : state[action.payload.todolistId]\n                    .map((task: taskType) => {\n                        return task.id === action.payload.taskId ? {...task, title: action.payload.title} : task\n\n                    } )\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            return {\n                ...state, [action.payload.todolistId] : []\n            }\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.payload.todolistId]\n            return copyState\n        }\n        case \"SELECT-ALL-ITEMS\": {\n            return {...action.payload.tasksObj}\n        }\n        default: return state\n    }\n}\ntype tasksReducerType = removeTaskType | addTaskType | changeTaskStatusType | changeTaskTitleType | addTodolistType | removeTodolistType | selectAllItemsType\ntype removeTaskType = ReturnType<typeof removeTasktAC>\ntype addTaskType = ReturnType<typeof addTasktAC>\ntype changeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\ntype changeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\n\nexport const removeTasktAC = (taskId: string, todolistId: string) => {\n    return {\n        type: 'REMOVE-TASK',\n        payload: {\n            taskId,\n            todolistId,\n        }\n    } as const\n}\nexport const addTasktAC = (todolistId: string, title: string) => {\n    return {\n        type: 'ADD-TASK',\n        payload: {\n            todolistId,\n            title\n        }\n    } as const\n}\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        payload: {\n            taskId,\n            isDone,\n            todolistId\n        }\n    } as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-TITLE',\n        payload: {\n            taskId,\n            title,\n            todolistId\n        }\n    } as const\n}\n\nexport const selectAllItemsAC = (isChecked : boolean, todolistID: string, tasksObj: any) => {\n    return {\n        type: 'SELECT-ALL-ITEMS',\n        payload: {\n            isChecked,\n            todolistID,\n            tasksObj\n        }\n    } as const\n}\n\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport Header from \"./Header\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\n\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    filterTasksAC,\r\n    removeTodolistAC, selectAllItemsAC,\r\n    todolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTasktAC, changeTaskStatusAC, changeTaskTitleAC, removeTasktAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type todoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n    selectHandler: boolean\r\n}\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type tasksStateType = {\r\n    [key: string]: taskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todoListId1 = v1()\r\n    let todoListId2 = v1()\r\n\r\n    let todolists = useSelector<AppRootStateType, todoListType[]>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, tasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodolistAC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    const filterTasks = useCallback((filter: FilterValueType, todoListId: string) => {\r\n        dispatch(filterTasksAC(filter, todoListId))\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((newValue: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleAC(newValue, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTasktAC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n\r\n        dispatch(removeTasktAC(id, todoListId));\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const onCnangeListItemHandler = useCallback((newValue: string, id: string, todolistId: string) => {\r\n\r\n        dispatch(changeTaskTitleAC(id, newValue, todolistId));\r\n\r\n    }, [])\r\n\r\n    const selectAllItems = useCallback((todolistID: string, isChecked: boolean) => {\r\n        dispatch(selectAllItemsAC(isChecked, todolistID, tasks))\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'New todolist'} addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((el: any) => {\r\n                            let tasksForTodoList = tasks[el.id];\r\n\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={el.id}\r\n                                        id={el.id}\r\n                                        filter={el.filter}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodoList}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTask={removeTask}\r\n                                        filterTasks={filterTasks}\r\n                                        addTask={addTask}\r\n                                        removeTodoList={removeTodoList}\r\n                                        onCnangeListItemHandler={onCnangeListItemHandler}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        selectAllItems={selectAllItems}\r\n                                        allSelectItem={el.selectHandler}\r\n\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\nimport {combineReducers, createStore} from 'redux';\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todolistsReducer} from \"./todolists-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <AppWithRedux />\r\n        </Provider>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}